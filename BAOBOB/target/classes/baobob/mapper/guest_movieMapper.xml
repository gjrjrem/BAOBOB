<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="spring.mvc.baobob.guest_movie.persistence.Guest_movieDAO">
	
	<!-- 영화 총갯수 -->
	<select id="getMovieCnt" resultType="int">
		SELECT COUNT(*)
		FROM movie_tbl
	</select>
	
	<!-- movie_state에 따른 영화갯수 -->
	<select id="getMovieStateCnt" resultType="int">
		SELECT COUNT(*)
		FROM movie_tbl
		WHERE movie_state = #{movie_state}
	</select>

	<!-- 영화 전체 리스트 -->
	<select id="getAllMovies" resultType="spring.mvc.baobob.vo.MovieVO">
		<![CDATA[
			SELECT * 
			FROM (SELECT movie_index, movie_title, movie_content, movie_janre,
						 movie_age, movie_rel_date, movie_director, movie_star, 
						 movie_country, movie_runtime, movie_poster, movie_trailer,
						 movie_state, rownum rNum 
					FROM ( 
							SELECT * FROM movie_tbl 
							ORDER BY movie_rel_date DESC, movie_index ASC 
						 ) 
				 ) 
			 WHERE  rNum >= #{start} AND rNum <= #{end}
		 ]]>
	</select>
	
	<!-- movie_state에 따른 영화리스트 -->
	<select id="getMovieStateMovies" resultType="spring.mvc.baobob.vo.MovieVO">
		<![CDATA[
			SELECT * 
			FROM (SELECT movie_index, movie_title, movie_content, movie_janre,
						 movie_age, movie_rel_date, movie_director, movie_star, 
						 movie_country, movie_runtime, movie_poster, movie_trailer,
						 movie_state, rownum rNum 
					FROM ( 
							SELECT * FROM movie_tbl 
							WHERE movie_state = #{movie_state}
							ORDER BY movie_rel_date DESC, movie_index ASC 
						 ) 
				 ) 
			 WHERE  rNum >= #{start} AND rNum <= #{end}
		 ]]>
	</select>
	
	<!-- 영화 상세정보 -->
	<select id="getMovie" resultType="spring.mvc.baobob.vo.MovieVO">
		SELECT * 
		FROM movie_tbl
		WHERE movie_index = #{movie_index}
	</select>
	
	<!-- movie_index에 따른 리뷰 갯수 -->
	<select id="getMovieReviewCnt" resultType="int">
		SELECT COUNT(*)
		FROM movie_review_tbl
		WHERE movie_index = #{movie_index}
	</select>
	
	<!-- movie_index에 따른 리뷰 리스트 -->
	<select id="getAllMovieReviews" resultType="spring.mvc.baobob.vo.ReviewVO">
		<![CDATA[
			SELECT * 
			FROM (SELECT review_index, review_grade, review_content, member_id, review_state, 
			            review_reg_date, rownum rNum 
			        FROM ( 
			                SELECT review_tbl.review_index, review_grade, review_content, member_id, review_state, 
			           				 review_reg_date 
			                FROM review_tbl JOIN movie_review_tbl
			                ON (review_tbl.review_index = movie_review_tbl.review_index)
			                JOIN movie_tbl
			                ON (movie_review_tbl.movie_index = movie_tbl.movie_index)
			                WHERE movie_review_tbl.movie_index= #{movie_index}
			                ORDER BY review_tbl.review_reg_date DESC, review_tbl.review_index ASC 
			             ) 
			     ) 
			 WHERE  rNum >= #{start} AND rNum <= #{end}
		]]>
	</select>
	
	<!-- 한아이디로 한영화에 한 리뷰만 쓸수 있음 - 썼었는지 확인 -->
	<select id="movieReviewCheck" resultType="int">
		SELECT COUNT(*)
		FROM movie_review_tbl join review_tbl
		ON (review_tbl.review_index = movie_review_tbl.review_index)
		WHERE member_id = #{member_id} 
		AND movie_index = #{movie_index}
		AND review_state = 1
	</select>
	
	<!-- 리뷰 작성 -->
	<insert id="insertReview" parameterType="spring.mvc.baobob.vo.ReviewVO">
		INSERT INTO review_tbl VALUES(review_tbl_seq.nextval, #{review_grade}, #{review_content}, #{member_id}, #{review_state}, sysdate)
	</insert>
	
	<!-- movieReview 추가 -->
	<insert id="insertMovieReview" parameterType="java.util.Map">
		INSERT INTO movie_review_tbl VALUES(review_tbl_seq.currval, #{movie_index})
	</insert>
	
	<!-- 좋아요 누른 사람 수 -->
	<select id="movieLike" resultType="String">
		SELECT COUNT(*)
		FROM movie_review_tbl JOIN review_tbl
		ON (movie_review_tbl.review_index = review_tbl.review_index)
		WHERE movie_review_tbl.movie_index = #{movie_index}
		AND review_tbl.review_grade = 1
	</select>
	
	<!-- 리뷰 수정 -->
	<update id="updateReview" parameterType="spring.mvc.baobob.vo.ReviewVO">
		UPDATE review_tbl SET review_grade = #{review_grade}, review_content = #{review_content}
		WHERE review_index = #{review_index}
	</update>
	
	<!-- movieReview 삭제 -->
	<delete id="deleteMovieReview" parameterType="java.util.Map">
		DELETE FROM movie_review_tbl
		WHERE movie_index = #{movie_index} AND review_index = #{review_index}
	</delete>
	
	<!-- 리뷰 삭제 -->
	<delete id="deleteReview" parameterType="int">
		DELETE FROM review_tbl 
		WHERE review_index = #{review_index}
	</delete>
	
	<!-- 예매 - 전체 영화 리스트(상영 종료 된것 빼고) -->
	<select id="getAllReserveMovies" resultType="spring.mvc.baobob.vo.MovieVO">
		SELECT *
		FROM movie_tbl
		WHERE movie_state!=2
		ORDER BY movie_state DESC
	</select>
	
	<!-- 영화별 예매 되는 날짜 갯수 -->
	<select id="getDateCnt" resultType="int">
		SELECT COUNT(*)
		FROM  theater_tbl
		JOIN theater_schedule_tbl
		ON (theater_tbl.theater_index = theater_schedule_tbl.theater_index) JOIN movie_tbl
		ON (theater_schedule_tbl.movie_index = movie_tbl.movie_index)
		WHERE movie_tbl.movie_index = #{movie_index}
		AND TO_CHAR(theater_schedule_tbl.schedule_startdate,'YYMMDD') = TO_CHAR(SYSDATE+#{plusDay},'YYMMDD')
	</select>
	
	<!-- 예매 - 영화 되는 날짜, 상영관 정보 -->
	<select id="getAllReserveSchedules" resultType="spring.mvc.baobob.vo.Theater_scheduleVO">
		SELECT * 
		FROM  theater_tbl
		JOIN theater_schedule_tbl
		ON (theater_tbl.theater_index = theater_schedule_tbl.theater_index) JOIN movie_tbl
		ON (theater_schedule_tbl.movie_index = movie_tbl.movie_index)
		WHERE movie_tbl.movie_index = #{movie_index}
		AND TO_CHAR(theater_schedule_tbl.schedule_startdate,'YYMMDD') = TO_CHAR(SYSDATE+#{plusDay},'YYMMDD')
		ORDER BY theater_schedule_tbl.schedule_startdate ASC, theater_tbl.theater_index ASC
	</select>
	
	<!-- 상영관 갯수 -->
	<select id="theaterCnt" resultType="int">
		SELECT COUNT(*) FROM theater_tbl
	</select>
	
	<!-- 각 상영관 마다의 총좌석 갯수 구하기 -->
	<select id="theaterSeats" resultType="int">
		SELECT COUNT(*)
		FROM theater_seat_tbl
		WHERE theater_index = #{theater_index}
		AND theater_schedule_index = -1
		AND seat_state IN(3,4,5)
	</select>
	
	<!-- 스케줄 정보 -->
	<select id="getSchedule" resultType="spring.mvc.baobob.vo.Theater_scheduleVO">
		SELECT *
		FROM theater_schedule_tbl
		WHERE theater_schedule_index = #{theater_schedule_index}
	</select>
	
	<!-- 상영관 상세 theaterDetail -->
	<select id="theaterDetail" resultType="spring.mvc.baobob.vo.TheaterVO">
		SELECT * FROM theater_tbl WHERE theater_index=#{theater_index}
	</select>
	
	<!-- 상영관 상세 좌석 정보 theaterSeatDetail -->
	<select id="theaterSeatDetail" resultType="spring.mvc.baobob.vo.Theater_seatVO">
		SELECT * FROM theater_seat_tbl WHERE theater_index=#{theater_index} AND theater_schedule_index=#{theater_schedule_index}
	</select>
	
	<!-- 선택된 한개의 좌석정보 -->
	<select id="seatInfo" resultType="spring.mvc.baobob.vo.Theater_seatVO">
		SELECT * FROM theater_seat_tbl WHERE seat_index = #{seat_index}
	</select>

	<!-- 메인 - 영화 가장 많이 본 순위 -->
	<select id="mainMovieRank" resultType="String">
		<![CDATA[
		SELECT title
		FROM (
		    SELECT count, title, rownum as num
		    FROM(
		        SELECT *
		        FROM (
		            SELECT COUNT(ts.movie_index) count, mt.movie_title title
		            FROM movie_history_tbl  mh, theater_schedule_tbl ts, movie_tbl mt
		            WHERE mh.theater_schedule_index = ts.theater_schedule_index
		                AND mt.movie_index = ts.movie_index
		            GROUP BY mt.movie_title
		        ) ORDER BY count DESC, title
		))
		WHERE num >= 1 AND num <= 7
		]]>
	</select>
	
	<!-- 메인 - 상영 중인 영화 -->
	<select id="mainMovieTheaterCnt" resultType="int">
		SELECT COUNT(DISTINCT movie_index)
    	FROM theater_schedule_tbl
	</select>
	
	<!-- 메인 - 상영 중인 영화 -->
	<select id="mainMovieTheater" resultType="String">
		<![CDATA[
		SELECT poster
		FROM ( SELECT poster, rownum as num
			   FROM ( SELECT DISTINCT ts.movie_index, mt.movie_poster poster
			    	  FROM theater_schedule_tbl ts, movie_tbl mt
			    	  WHERE mt.movie_index = ts.movie_index
			    	  ORDER BY ts.movie_index DESC)
			   )
		WHERE num >= #{start} AND num <= #{end}	
		]]>
	</select>
	
	<!-- 멤버 정보 -->
	<select id="getMemberInfo" resultType="spring.mvc.baobob.vo.Member">
		SELECT *
		FROM member_tbl
		WHERE member_id = #{member_id} 
	</select>
	
	<!-- 1. 결제 테이블 추가 -->
	<insert id="insertHistory" parameterType="String">
		INSERT INTO history_tbl 
		VALUES(history_tbl_seq.nextval, sysdate, #{member_id})
	</insert>
	
	<!-- 2. 영화 결제테이블 추가 -->
	<insert id="insertMovieHistory" parameterType="java.util.Map">
		INSERT INTO movie_history_tbl 
		VALUES(history_tbl_seq.currval, #{theater_schedule_index}, #{movie_history_price})
	</insert>
	
	<!-- 3. 좌석 테이블의 seat_state 변경 -->
	<update id="updateSeatState" parameterType="java.util.Map">
		UPDATE theater_seat_tbl SET seat_state=6, member_id=#{member_id} 
		WHERE seat_index = #{seat_index}
	</update>
	
	<!-- 4. 스케줄테이블의 emtpy_seat 감소(결제한 만큼) -->
	<update id="updateEmptySeat" parameterType="java.util.Map">
		UPDATE theater_schedule_tbl SET schedule_empty_seat = schedule_empty_seat-#{totalCnt} 
		WHERE theater_schedule_index = #{theater_schedule_index}
	</update>
	
	<!-- 5. Update movie_tbl  movie_count + totalCnt해주기(영화관람객수 증가) -->
	<update id="updateMovieCount" parameterType="java.util.Map">
		UPDATE movie_tbl SET movie_count = movie_count + #{totalCnt} 
		WHERE movie_index = #{movie_index}
	</update>
	
	<!-- 6. Update member_tbl member_point, member_cumpoint (결제시 증가) -->
	<update id="updateIncreasePoint" parameterType="java.util.Map">
		UPDATE member_tbl 
		SET member_point=member_point+(#{movie_history_price_10perc}), 
			member_cumPoint=member_cumPoint+(#{movie_history_price_10perc}) 
		WHERE member_id = #{member_id}
	</update>
	
	<!-- 7. Update member_tbl member_point (포인트 사용했을시 감소) -->
	<update id="updateDecreasePoint" parameterType="java.util.Map">
		UPDATE member_tbl SET member_point=member_point-#{member_point} 
		WHERE member_id = #{member_id}
	</update>
	
	<!-- 8. SELECT member_tble에서 member_cumPoint확인 -->
	<select id="getMemberCumPoint" resultType="int">
		SELECT member_cumPoint FROM member_tbl 
		WHERE member_id= #{member_id}
	</select>
	
	<!-- 9. UPDATE member_step(Service에서 if조건으로 조건 만족시 실행) -->
	<update id="updateMemberStep" parameterType="java.util.Map">
		UPDATE member_tbl SET member_step = #{member_step} 
		WHERE member_id= #{member_id}
	</update>
	
	<!-- 무비파인더 검색결과 갯수 -->
	<select id="movieFinderResultCnt" parameterType="spring.mvc.baobob.vo.MovieFinderVO" resultType="int">
		SELECT COUNT(*)
		FROM movie_tbl
		WHERE 
		
		<if test="!keyword.equals('')">
			<choose>
				<when test="sel.equals('movie_title')">
					movie_title LIKE '%'||#{keyword}||'%'
				</when>
				<when test="sel.equals('movie_star')">
					movie_star LIKE '%'||#{keyword}||'%'
				</when>
				<when test="sel.equals('movie_director')">
					movie_director LIKE '%'||#{keyword}||'%'
				</when>
				<when test="sel.equals('all')">
					movie_title LIKE '%'||#{keyword}||'%' 
					OR movie_star LIKE '%'||#{keyword}||'%' 
					OR movie_director LIKE '%'||#{keyword}||'%' 
					OR movie_content LIKE '%'||#{keyword}||'%' 
				</when>
			</choose>
			AND movie_janre IN
			<foreach item="movie_janre" collection="movie_janre" open="(" separator="," close=")">
				#{movie_janre}
			</foreach>
			
			AND movie_age IN
			<foreach item="movie_age" collection="movie_age" open="(" separator="," close=")">
				#{movie_age}
			</foreach>
			
			AND movie_country IN
			<foreach item="movie_country" collection="movie_country" open="(" separator="," close=")">
				#{movie_country}
			</foreach>
		</if>
		
		<if test="keyword.equals('')">
			movie_janre IN
			<foreach item="movie_janre" collection="movie_janre" open="(" separator="," close=")">
				#{movie_janre}
			</foreach>
			
			AND movie_age IN
			<foreach item="movie_age" collection="movie_age" open="(" separator="," close=")">
				#{movie_age}
			</foreach>
			
			AND movie_country IN
			<foreach item="movie_country" collection="movie_country" open="(" separator="," close=")">
				#{movie_country}
			</foreach>
		</if>
	</select>
	
	<!-- 무비파인더 검색결과 -->
	<!-- collection은 vo안에 array의 이름 -->
	<select id="movieFinderResult" parameterType="spring.mvc.baobob.vo.MovieFinderVO" resultType="spring.mvc.baobob.vo.MovieVO">
		
			SELECT * 
			FROM (SELECT movie_index, movie_title, movie_content, movie_janre,
						 movie_age, movie_rel_date, movie_director, movie_star, 
						 movie_country, movie_runtime, movie_poster, movie_trailer,
						 movie_state, movie_count, rownum rNum 
					FROM ( 
							SELECT * FROM movie_tbl 
							WHERE 
							<if test="!keyword.equals('')">
								<choose>
									<when test="sel.equals('movie_title')">
										movie_title LIKE '%'||#{keyword}||'%'
									</when>
									<when test="sel.equals('movie_star')">
										movie_star LIKE '%'||#{keyword}||'%'
									</when>
									<when test="sel.equals('movie_director')">
										movie_director LIKE '%'||#{keyword}||'%'
									</when>
									<when test="sel.equals('all')">
										movie_title LIKE '%'||#{keyword}||'%' 
										OR movie_star LIKE '%'||#{keyword}||'%' 
										OR movie_director LIKE '%'||#{keyword}||'%' 
										OR movie_content LIKE '%'||#{keyword}||'%' 
									</when>
								</choose>
								AND movie_janre IN
								<foreach item="movie_janre" collection="movie_janre" open="(" separator="," close=")">
									#{movie_janre}
								</foreach>
								
								AND movie_age IN
								<foreach item="movie_age" collection="movie_age" open="(" separator="," close=")">
									#{movie_age}
								</foreach>
								
								AND movie_country IN
								<foreach item="movie_country" collection="movie_country" open="(" separator="," close=")">
									#{movie_country}
								</foreach>
							</if>
							<if test="keyword.equals('')">
								movie_janre IN
								<foreach item="movie_janre" collection="movie_janre" open="(" separator="," close=")">
									#{movie_janre}
								</foreach>
								
								AND movie_age IN
								<foreach item="movie_age" collection="movie_age" open="(" separator="," close=")">
									#{movie_age}
								</foreach>
								
								AND movie_country IN
								<foreach item="movie_country" collection="movie_country" open="(" separator="," close=")">
									#{movie_country}
								</foreach>
							</if>
							ORDER BY movie_rel_date DESC, movie_index ASC 
						 ) 
				 ) 
		<![CDATA[		 
			 WHERE  rNum >= #{start} AND rNum <= #{end}
		 ]]>	
	</select>
	
</mapper>