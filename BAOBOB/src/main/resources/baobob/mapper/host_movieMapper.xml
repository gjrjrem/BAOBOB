<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="spring.mvc.baobob.host_movie.persistence.Host_movieDAO">
	
	<!-- 영화 갯수 구하기 getMovieCnt -->
	<select id="getMovieCnt" resultType="int">
		SELECT count(*) FROM movie_tbl
	</select>
	
	<!-- 영화 전체 목록 조회(개봉일 순) getMovieList -->
	<select id="getMovieList" resultType="spring.mvc.baobob.vo.MovieVO">
		<![CDATA[
		SELECT * 
	       FROM (
	       		 SELECT movie_index, movie_title, movie_content, movie_janre, movie_age, 
	       		 		movie_rel_date, movie_director, movie_star, movie_country, 
	       		 		movie_runTime, movie_poster, movie_trailer, movie_state, rownum rNum 
		 		  FROM ( 
		 		  		  SELECT * FROM movie_tbl
		 		  		   ORDER BY movie_index DESC
		 		  	    ) 
		 		)  
		]]>
	</select>
	
	<!-- 영화 추가 처리 hostMovieAddPro -->
	<insert id="hostMovieAddPro" parameterType="spring.mvc.baobob.vo.MovieVO">
		INSERT INTO movie_tbl (movie_index, movie_title, movie_content, movie_janre, movie_age, movie_rel_date, movie_director, movie_star, movie_country, movie_runTime, movie_poster, movie_trailer, movie_state) 
		VALUES (movie_tbl_SEQ.NEXTVAL, #{movie_title}, #{movie_content}, #{movie_janre}, #{movie_age}, #{movie_rel_date}, #{movie_director}, #{movie_star}, #{movie_country}, #{movie_runTime}, #{movie_poster}, #{movie_trailer}, #{movie_state}, 0)
	</insert>

	<!-- 영화 삭제 처리 hostMovieDel -->
	<delete id="hostMovieDel" parameterType="int">
		DELETE movie_tbl WHERE movie_index = #{movie_index}
	</delete>
	
	<!-- 영화 상세 hostMovieDetail -->
	<select id="hostMovieDetail" resultType="spring.mvc.baobob.vo.MovieVO">
		SELECT * FROM movie_tbl WHERE movie_index=#{movie_index}
	</select>
	
	<!-- 영화 수정 처리 hostMovieModPro -->
	<update id="hostMovieModPro" parameterType="spring.mvc.baobob.vo.MovieVO">
		UPDATE movie_tbl 
		SET movie_title=#{movie_title}, movie_content=#{movie_content}, movie_janre=#{movie_janre}, 
		    movie_age=#{movie_age}, movie_rel_date=#{movie_rel_date}, movie_director=#{movie_director}, 
		    movie_star=#{movie_star}, movie_country=#{movie_country}, movie_runTime=#{movie_runTime}, 
		    movie_poster=#{movie_poster}, movie_trailer=#{movie_trailer}, movie_state=#{movie_state} 
	 	WHERE movie_index=#{movie_index}
	</update>
	
	<!-- 상영관 존재 여부 theater_index_check -->
	<select id="theater_index_check" resultType="int">
		SELECT count(*) FROM theater_tbl WHERE theater_index = #{theater_index}
	</select>
	
	<!-- 상영관 추가 insert_theater -->
	<insert id="insert_theater" parameterType="java.util.Map">
		INSERT INTO theater_tbl values(#{theater_index}, #{theater_row}, #{theater_col})
	</insert>
	
	<!-- 상영관 좌석별 상태 insert_theater_seat -->
	<insert id="insert_theater_seat" parameterType="java.util.Map">
		INSERT INTO theater_seat_tbl values(theater_seat_tbl_seq.nextval, #{theater_index}, #{row}, #{col}, #{state}, #{price}, -1)
	</insert>
	
	<!-- 상영관 존재 여부 getTheaterCnt -->
	<select id="getTheaterCnt" resultType="int">
		SELECT count(*) FROM theater_tbl
	</select>
	
	<!-- 상영관 목록 조회 getTheaterList -->
	<select id="getTheaterList" resultType="spring.mvc.baobob.vo.TheaterVO">
		<![CDATA[
		SELECT * 
	       FROM (
	       		 SELECT theater_index, theater_row, theater_col, rownum rNum 
		 		  FROM ( 
		 		  		  SELECT * FROM theater_tbl
		 		  		   ORDER BY theater_index ASC
		 		  	    ) 
		 		)  
		  WHERE rNum >= #{start} AND rNum <= #{end} 
		]]>
	</select>
	
	<!-- 상영관 상세 hostTheaterDetail -->
	<select id="hostTheaterDetail" resultType="spring.mvc.baobob.vo.TheaterVO">
		SELECT * FROM theater_tbl WHERE theater_index=#{theater_index}
	</select>
	
	<!-- 상영관 상세 좌석 정보 hostTheaterSeatDetail -->
	<select id="hostTheaterSeatDetail" resultType="spring.mvc.baobob.vo.Theater_seatVO">
		SELECT * FROM theater_seat_tbl WHERE theater_index=#{theater_index} AND theater_schedule_index=-1
	</select>
	
	<!-- 상영관 좌석 수정 처리 modify_theater_seat -->
	<update id="modify_theater_seat" parameterType="java.util.Map">
		UPDATE theater_seat_tbl SET seat_state=#{state}, seat_price=#{price} WHERE theater_index=#{theater_index} AND seat_row=#{row} AND seat_col=#{col}
	</update>
	
	<!-- 상영관 삭제 처리 -->
	<delete id="hostTheaterDel" parameterType="int">
		DELETE theater_tbl WHERE theater_index=#{theater_index}
	</delete>
	
	<!-- 상영관 좌석 삭제 처리 -->
	<delete id="hostTheaterSeatDel" parameterType="int">
		DELETE theater_seat_tbl WHERE theater_index=#{theater_index}
	</delete>
	
	<!-- 상영중인 영화 정보 -->
	<select id="getMovieING" resultType="spring.mvc.baobob.vo.MovieVO">
		SELECT * FROM movie_tbl WHERE movie_state = 1
	</select>
	
	<!-- 모든 상영관 정보 -->
	<select id="getTheaterAllList" resultType="spring.mvc.baobob.vo.TheaterVO">
		SELECT * FROM theater_tbl
	</select>
	
	<!-- 상영 가능한 상영관 count -->
	<select id="checkPosTheaterCnt" resultType="int">
		<![CDATA[
			SELECT count(*) 
			  FROM theater_tbl 
			 WHERE NOT theater_index IN(SELECT theater_index 
			 							  FROM theater_schedule_tbl 
										 WHERE (schedule_startTime > to_char(to_date(#{schedule_start}, 'YY-MM-DD-HH24-MI')-3/24, 'YY-MM-DD-HH24-MI') 
										   AND (to_char(to_date(#{schedule_start}, 'YY-MM-DD-HH24-MI')+180/24/60, 'YY-MM-DD-HH24-MI') >	schedule_endTime)))
		]]>
	</select>
	
	<!-- 선택한 시간대에 상영 가능한 상영관 -->
	<select id="checkPosTheater" resultType="spring.mvc.baobob.vo.TheaterVO">
		<![CDATA[
			SELECT * 
			  FROM theater_tbl 
			 WHERE NOT theater_index IN(SELECT theater_index 
			 							  FROM theater_schedule_tbl 
										 WHERE (schedule_startTime > to_char(to_date(#{schedule_start}, 'YY-MM-DD-HH24-MI')-3/24, 'YY-MM-DD-HH24-MI') 
										   AND (to_char(to_date(#{schedule_start}, 'YY-MM-DD-HH24-MI')+180/24/60, 'YY-MM-DD-HH24-MI') >	schedule_endTime)))
		]]>
	</select>
	
	<!-- 스케줄 추가 처리 -->
	<insert id="hostScheduleAddPro" parameterType="java.util.Map">
		INSERT INTO theater_schedule_tbl 
        values(theater_schedule_tbl_SEQ.NEXTVAL, #{movie_index}, #{theater_index}, #{schedule_start}, #{schedule_start}, 
              to_char(to_date(#{schedule_start}, 'YY-MM-DD-HH24-MI')+(SELECT movie_runTime FROM movie_tbl WHERE movie_index=#{movie_index})/24/60, 'YY-MM-DD-HH24-MI'), #{schedule_MDNstate}, 0)
	</insert>
	
	<!-- 스케줄 목록 조회 -->
	<select id="hostScheduleList" resultType="spring.mvc.baobob.vo.Theater_scheduleVO">
		<![CDATA[
		SELECT * FROM theater_schedule_tbl 
		 WHERE schedule_startTime > to_char(to_date(#{startDate}, 'YY-MM-DD-HH24-MI'), 'YY-MM-DD-HH24-MI')
		   AND schedule_startTime < to_char(to_date(#{endDate}, 'YY-MM-DD-HH24-MI'), 'YY-MM-DD-HH24-MI')
		   AND theater_index = #{theater_index}
		]]>
	</select>
	
	<!-- 스케줄 상세 -->
	<select id="hostScheduleDetail" resultType="spring.mvc.baobob.vo.Theater_scheduleVO">
		SELECT * FROM theater_schedule_tbl WHERE theater_schedule_index = #{theater_schedule_index}
	</select>
	
	<!-- 스케줄 수정 - 선택한 시간에 다른 스케줄이 있는지 확인 -->
	<select id="chkCnt" resultType="int">
		<![CDATA[
		SELECT count(*) 
		  FROM theater_schedule_tbl 
		 WHERE (schedule_startTime > to_char(to_date(#{schedule_startTime}, 'YY-MM-DD-HH24-MI')-3/24, 'YY-MM-DD-HH24-MI') 
		   AND (to_char(to_date(#{schedule_startTime}, 'YY-MM-DD-HH24-MI')+4/24, 'YY-MM-DD-HH24-MI') >	schedule_endTime))
		   AND theater_schedule_index IN (select theater_schedule_index FROM theater_schedule_tbl WHERE NOT theater_schedule_index = #{theater_schedule_index})
		   AND theater_index = #{theater_index}
	   ]]>
	</select>
	
	<!-- 스케줄 수정 처리 -->
	<update id="updateSchedule" parameterType="java.util.Map">
		UPDATE theater_schedule_tbl 
   		   SET schedule_startTime = #{schedule_startTime}, 
       		   schedule_startDate = #{schedule_startTime}, 
       		   movie_index = #{movie_index},
       		   theater_index = #{theater_index},
       	 	   schedule_endTime = to_char(to_date(#{schedule_startTime}, 'YY-MM-DD-HH24-MI')+(SELECT movie_runTime 
                                                                                  		        FROM movie_tbl 
                                                                                  		       WHERE movie_index=#{movie_index})/24/60, 'YY-MM-DD-HH24-MI'), 
      		   schedule_MDNstate =  #{schedule_MDNstate} 
	    WHERE theater_schedule_index = #{theater_schedule_index}
	</update>
	
	<!-- 스케줄 삭제 처리 -->
	<delete id="hostScheduleDelPro" parameterType="int">
		DELETE theater_schedule_tbl WHERE theater_schedule_index = #{theater_schedule_index}
	</delete>
	
	<!-- 직원 고용 아이디 확인 -->
	<select id="hostMovieEmpChkMemberId" resultType="int">
		SELECT count(*) FROM member_tbl WHERE member_id = #{member_id}
	</select>
	
	<!-- 아이디로 고용할 직원 정보 가져오기 -->
	<select id="hostMovieEmpInfo" resultType="spring.mvc.baobob.vo.Member">
		SELECT * FROM member_tbl WHERE member_id=#{member_id}
	</select>
	
	<!-- 고용할 직원의 아이디 state 변경 -->
	<update id="memberChangeState" parameterType="String">
		UPDATE member_tbl SET member_step = 3 WHERE member_id = #{member_id}
	</update>
	
	<!-- 영화 직원 목록에 추가하기 -->
	<insert id="insertEmp" parameterType="java.util.Map">
		INSERT INTO employee_tbl VALUES(employee_tbl_SEQ.NEXTVAL, #{member_id}, #{employee_jumin2}, SYSDATE)
	</insert>
	
	<!-- 영화 직원 수 -->
	<select id="hostMovieEmpCnt" resultType="int">
		SELECT COUNT(*) FROM member_tbl WHERE member_step IN(2, 3)
	</select>
	
	<!-- 영화 직원 목록 가져오기 -->
	<select id="hostMovieEmpList" resultType="spring.mvc.baobob.vo.Member">
		SELECT member_tbl.member_id member_id, member_tbl.member_name member_name, member_tbl.member_tel member_tel, employee_tbl.employee_date member_reg_date FROM member_tbl JOIN employee_tbl ON member_tbl.member_id = employee_tbl.member_id WHERE member_tbl.member_step IN(2, 3)
	</select>
	
	<!-- 종합 포인트 등급 가져오기 -->
	<select id="getMemberPoint" resultType="int">
		SELECT member_cumPoint FROM member_tbl WHERE member_id = #{member_id}
	</select>
	
	<!-- 직원 목록에서 삭제하기 -->
	<delete id="hostMovieEmpDel" parameterType="String">
		DELETE employee_tbl WHERE member_id = #{member_id}
	</delete>
	
	<!-- 회원 step 변경하기 -->
	<update id="updateMemberStep" parameterType="spring.mvc.baobob.vo.Member">
		UPDATE member_tbl SET member_step = #{member_step} WHERE member_id = #{member_id}
	</update>
	
	<!-- 상영관의 선택한 좌석 state 불러오기 -->
	<select id="getTheaterSeatState" resultType="int">
		SELECT seat_state FROM theater_seat_tbl WHERE seat_row = #{row} AND seat_col = #{col} AND theater_index = #{theater_index} AND theater_schedule_index = -1
	</select>
	
	<!-- 상영관의 선택한 좌석 price 불러오기 -->
	<select id="getTheaterSeatPrice" resultType="int">
				SELECT seat_price FROM theater_seat_tbl WHERE seat_row = #{row} AND seat_col = #{col} AND theater_index = #{theater_index} AND theater_schedule_index = -1
	</select>
	
	<!-- 스케줄에 해당하는 좌석 생성 -->
	<insert id="TheaterScheduleSeatAddPro" parameterType="java.util.Map">
		INSERT INTO theater_seat_tbl VALUES(theater_seat_tbl_SEQ.nextval, #{theater_index}, #{row}, #{col}, #{seatState}, #{seatPrice}, (SELECT MAX(theater_schedule_index) FROM theater_schedule_tbl))
	</insert>
	
	<!-- 스케줄에 해당하는 좌석 정보 가져오기 -->
	<select id="hostTheaterScheduleSeatDetail" resultType="spring.mvc.baobob.vo.Theater_seatVO">
		SELECT * FROM theater_seat_tbl WHERE theater_index=#{theater_index} AND theater_schedule_index=#{theater_schedule_index}
	</select>
	
	<!-- 영화 스케줄에 빈좌석 업데이트하기 -->
	<update id="updateEmpty_seat" parameterType="int">
		UPDATE theater_schedule_tbl SET schedule_empty_seat = #{empty_seat} WHERE theater_schedule_index = (SELECT MAX(theater_schedule_index) FROM theater_schedule_tbl)
	</update>
	
	<!-- 결산 - 영화 장르별 관람객 수 -->
	<resultMap type="spring.mvc.baobob.vo.HostMovieChartVO" id="movieCountChart">
		<id 		property="kind"		column="kind" />
		<result 	property="value"	column="value" />
	</resultMap>
	<select id="getMovieCountChart" resultMap="movieCountChart">
		SELECT NVL(movie_janre, 0) kind, sum(movie_count) value
		  FROM movie_tbl
		 GROUP BY ROLLUP(movie_janre)
	</select>
	
	<resultMap type="spring.mvc.baobob.vo.hostTChartVO" id="movieAgeChart">
		<id			property="kind"		column="kind" />
		<result		property="sum"		column="sum" />
	</resultMap>
	<!-- 결산 - 영화 제한연령별 매출 -->
	<select id="movieAgeChart" resultMap="movieAgeChart">
		SELECT NVL(m.movie_age, 99) kind, SUM(h.movie_history_price) sum
		  FROM movie_tbl m JOIN theater_schedule_tbl t  
		    ON m.movie_index = t.movie_index
		  JOIN movie_history_tbl h
		    ON t.theater_schedule_index = h.theater_schedule_index
		 GROUP BY ROLLUP(m.movie_age)
	</select>
	
	<!-- 결산 - 관람객 성별 수 -->
	<select id="movieSexCountChart" resultMap="movieCountChart">
		SELECT NVL(m.member_sex, 'total') kind, SUM(mh.movie_history_price) value
	      FROM member_tbl m 
	      JOIN history_tbl h
	        ON m.member_id = h.member_id
	      JOIN movie_history_tbl mh
	        ON h.history_index = mh.history_index
	     GROUP BY ROLLUP(m.member_sex)
	</select>
	
	
	<!-- 워드클라우드 -->
	
	
	<!-- 워드 클라우드 단어를 가져옴 -->
	<select id="getWordCloudModel" resultType="spring.mvc.baobob.vo.WordVO">
		SELECT *
	      FROM (
				SELECT word, count, type_of_speech, update_date, reg_date, rownum as rn
				  FROM (SELECT *
                          FROM wordcloud_list
                 		 ORDER BY count DESC, update_date DESC, reg_date DESC
                        )				 
         		)
    	 WHERE rn BETWEEN 1 AND 30 
	</select>
	
	<!-- 워드 클라우드 단어를 확인 -->
	<select id="checkWordCloud" resultType="int">
		SELECT COUNT(*)
		  FROM wordcloud_list
		 WHERE word = #{word} AND movie_index = #{movie_index}
	</select>
	
	<!-- 워드 클라우드 단어를 삽입 시킴 -->
	<insert id="addWordCloud" parameterType="spring.mvc.baobob.vo.WordVO">
		INSERT INTO wordcloud_list (word, count, type_of_speech, update_date, reg_date, movie_index) 
							VALUES (#{word}, #{count}, #{type_of_speech}, #{update_date}, #{reg_date}, #{movie_index})
	</insert>
	
	<!-- 워드 클라우드 단어를 업데이트 시킴 -->
	<update id="updateWordCloud" parameterType="spring.mvc.baobob.vo.WordVO">
		UPDATE wordcloud_list
		   SET count = count + #{count},
		       update_date = #{update_date}
		 WHERE word = #{word} AND movie_index = #{movie_index}
	</update>
	
	<!-- 워드클라우드 단어 검색 -->
	<select id="searchWordcloud" parameterType="Map" resultType="spring.mvc.baobob.vo.WordVO">
		SELECT *
	      FROM (
				SELECT word, count, type_of_speech, update_date, reg_date, movie_index, rownum as rn
				  FROM (
				  		SELECT *
                          FROM wordcloud_list
                 		 ORDER BY count DESC
                        )
                  WHERE 
                  <if test="type == 1">
                  	type_of_speech = 'Noun' OR type_of_speech = 'ProperNoun'
                  </if>
                  <if test="type == 2">
                  	type_of_speech = 'Verb'
                  </if>
                  <if test="type == 3">
                  	type_of_speech = 'Hashtag'
                  </if>
                  <if test="type == 4">
                  	type_of_speech = 'Noun' OR type_of_speech = 'ProperNoun' OR type_of_speech = 'Verb'
                  </if>
                  <if test="type == 5">
                  	type_of_speech = 'Verb' OR type_of_speech = 'Hashtag'
                  </if>
                  <if test="type == 6">
                  	type_of_speech = 'Noun' OR type_of_speech = 'ProperNoun' OR type_of_speech = 'Hashtag'
                  </if>
                  <if test="type == 7">
                  	type_of_speech = 'Noun' OR type_of_speech = 'ProperNoun' OR type_of_speech = 'Verb' OR type_of_speech = 'Hashtag'
                  </if>
         		)
    	 WHERE rn BETWEEN 1 AND #{countOfWords} AND movie_index = #{movie_index}
	</select>
	
	<!-- 워드클라우드 단어 검색 (날짜포함)-->
	<select id="searchWordcloud2" parameterType="Map" resultType="spring.mvc.baobob.vo.WordVO">
		SELECT *
	      FROM (
				SELECT word, count, type_of_speech, update_date, reg_date, rownum as rn
				  FROM (
				  		SELECT *
                          FROM wordcloud_list
                          WHERE update_date BETWEEN #{strDate} AND #{endDate}
                 		 ORDER BY count DESC
                        )
                  
                  WHERE 
                  <if test="type == 1">
                  	type_of_speech = 'Noun' OR type_of_speech = 'ProperNoun'
                  </if>
                  <if test="type == 2">
                  	type_of_speech = 'Verb'
                  </if>
                  <if test="type == 3">
                  	type_of_speech = 'Hashtag'
                  </if>
                  <if test="type == 4">
                  	type_of_speech = 'Noun' OR type_of_speech = 'ProperNoun' OR type_of_speech = 'Verb'
                  </if>
                  <if test="type == 5">
                  	type_of_speech = 'Verb' OR type_of_speech = 'Hashtag'
                  </if>
                  <if test="type == 6">
                  	type_of_speech = 'Noun' OR type_of_speech = 'ProperNoun' OR type_of_speech = 'Hashtag'
                  </if>
                  <if test="type == 7">
                  	type_of_speech = 'Noun' OR type_of_speech = 'ProperNoun' OR type_of_speech = 'Verb' OR type_of_speech = 'Hashtag'
                  </if>
                  
         		)
    	 WHERE rn BETWEEN 1 AND #{countOfWords} 
	</select>
	
	
	
	
	
	
	
	
	
	
</mapper>