<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="spring.mvc.baobob.host_parking.persistence.Host_parkingDAO">
	
	<!-- 현재 이용자 수 -->
	<select id="getParkingMember" resultType="int">
		SELECT COUNT(str)
		FROM (
		    SELECT SUBSTR(p_history_in, 1,8) str
		    FROM park_history_tbl
		    WHERE p_history_out IS NULL
		)
		WHERE TO_DATE(str, 'YY/mm/dd') = TO_DATE(sysdate)
	</select>
	
	<!-- 평균 주차 시간 -->
	<select id="getAvgPakingTime" resultType="java.util.Map">
		SELECT FLOOR(hour) hour, FLOOR(minute) minute
		FROM(
		    SELECT AVG(EXTRACT(HOUR FROM ptime)) hour, AVG(EXTRACT(MINUTE FROM ptime)) minute
		    FROM(
		        SELECT p_history_out  - p_history_in ptime
		        FROM park_history_tbl
		        WHERE p_history_out IS NOT NULL
		    )
		)
	</select>
	
	<!-- 오늘 영화 이용자 -->
	<select id="getParkingMovieMember" resultType="int">
		SELECT COUNT(str)
		FROM (
		    SELECT SUBSTR(p_history_in, 1,8) str
		    FROM history_tbl ht, park_history_tbl pt, movie_history_tbl mt
		    WHERE ht.history_index = pt.history_index
		        AND ht.history_index = mt.history_index
		)
		WHERE TO_DATE(str, 'YY/mm/dd') = TO_DATE(sysdate)
	</select>
	
	<!-- 오늘 식당 이용자 -->
	<select id="getParkingRestaurantMember" resultType="int">
		SELECT COUNT(str)
		FROM (
		    SELECT SUBSTR(p_history_in, 1,8) str
		    FROM history_tbl ht, park_history_tbl pt, restaurant_history_tbl rt
		    WHERE ht.history_index = pt.history_index
		        AND ht.history_index = rt.history_index
		)
		WHERE TO_DATE(str, 'YY/mm/dd') = TO_DATE(sysdate)
	</select>
	
	<!-- 주차장 구역 정보 존재 여부 -->
	<select id="getParkingSpace" resultType="spring.mvc.baobob.vo.ParkingSpace">
		SELECT * FROM park_space_tbl
	</select>

	<!-- 주차장 구역 정보 등록 -->
	<insert id="parkingSpaceChange" parameterType="spring.mvc.baobob.vo.ParkingSpace">
		INSERT INTO park_space_tbl
			(p_space_col, p_space_row, p_space_info)
		VALUES
			(#{p_space_col}, #{p_space_row}, #{p_space_info})
	</insert>

	<!-- 주차장 구역 정보 수정 -->
	<update id="parkingSpaceUpdate" parameterType="spring.mvc.baobob.vo.ParkingSpace">
		UPDATE park_space_tbl
		SET
			p_space_col=#{p_space_col}, 
			p_space_row=#{p_space_row}, 
			p_space_info=#{p_space_info}
	</update>
	
	<!-- 주차장 해당 구역 정보 -->
	<select id="getParking" resultType="spring.mvc.baobob.vo.Parking">
		SELECT * 
		FROM park_tbl
		WHERE park_index = #{park_index}
	</select>
	
	<!-- 주차장 각 구역 정보 등록 -->
	<insert id="parkingChange" parameterType="spring.mvc.baobob.vo.Parking">
		INSERT INTO park_tbl
			(park_index, park_state, park_theme, park_last_date)
		VALUES
			(#{park_index}, #{park_state}, #{park_theme}, SYSTIMESTAMP)
	</insert>
	
	<!-- 주차장 각 구역 정보 수정 -->
	<update id="parkingUpdate" parameterType="spring.mvc.baobob.vo.Parking">
		UPDATE park_tbl
		SET
			park_state = #{park_state},
			park_theme = #{park_theme}
		WHERE park_index = #{park_index}
	</update>
	
	<!-- 주차장 구역 상태 정보 -->
	<select id="getParkingStates" resultType="String">
		<![CDATA[
		SELECT park_state
		FROM park_tbl
		WHERE park_index < #{last_idx}
        ORDER BY park_index
		]]>
	</select>
	
	<select id="getParkingFee" resultType="spring.mvc.baobob.vo.ParkingFee">
		SELECT *
		FROM park_fee_tbl
	</select>
	
	<select id="getParkingFeeCount" resultType="int">
		SELECT COUNT(*)
		FROM park_fee_tbl
	</select>
	
	<!-- 주차 기본 요금 등록 -->
	<insert id="parkingFeeChange" parameterType="spring.mvc.baobob.vo.ParkingFee">
		INSERT INTO park_fee_tbl
			(p_fee_exc_price, p_fee_exc_time, p_fee_base_price, p_fee_base_time, p_fee_movie_time, p_fee_rest_time)
		VALUES 
			(#{p_fee_exc_price}, #{p_fee_exc_time}, #{p_fee_base_price}, #{p_fee_base_time}, #{p_fee_movie_time}, #{p_fee_rest_time})
	</insert>
	
	<!-- 주차 기본 요금 수정 -->
	<update id="parkingFeeUpdate" parameterType="spring.mvc.baobob.vo.ParkingFee">
		UPDATE park_fee_tbl
		SET
			p_fee_exc_price = #{p_fee_exc_price}, 
			p_fee_exc_time = #{p_fee_exc_time}, 
			p_fee_base_price = #{p_fee_base_price}, 
			p_fee_base_time = #{p_fee_base_time}
	</update>
	
	<!-- 주차 내역 총 개수 -->
	<!-- <select id="getParkingHistoryCnt" resultType="int">
		SELECT COUNT(*) FROM park_history_tbl
	</select> -->
	
	<resultMap id="pHistoryMap" type="spring.mvc.baobob.vo.ParkingHistory" >
		<id property="p_history_index" column="p_history_index"/>
		<result property="history_index" column="history_index"/>
		<result property="p_history_in" column="p_history_in"/>
		<result property="p_history_out" column="p_history_out"/>
		<result property="p_history_price" column="p_history_price"/>
		<result property="p_history_space" column="p_history_space"/>
		<result property="p_history_date" column="p_history_date"/>
		<collection property="history" resultMap="historyMap" />
	</resultMap>
	
	<resultMap id="historyMap" type="spring.mvc.baobob.vo.HistoryVO" >
		<result property="history_index" column="history_index"/>
		<result property="history_date" column="history_date"/>
		<result property="member_id" column="member_id"/>
	</resultMap>
	
	<!-- 주차 내역 -->
	<!-- <select id="getParkingHistory" resultMap="pHistoryMap">
		<![CDATA[
		SELECT * 
		FROM (SELECT p_history_index, history_index, p_history_in, p_history_out, p_history_price, p_history_space, p_history_date, member_id, rownum as num
			  FROM (SELECT p_history_index, ph.history_index, p_history_in, p_history_out, p_history_price, p_history_space, p_history_date, ht.member_id
				    FROM park_history_tbl ph, history_tbl ht
				    WHERE ph.history_index = ht.history_index
				    ORDER BY p_history_index DESC))
		WHERE num >= #{start} AND NUM <= #{end}
		]]>
	</select> -->
	
	<!-- 납부 내역 총 개수 -->
	<select id="getParkingPayCnt" resultType="int">
		SELECT COUNT(*)
		FROM park_history_tbl
		WHERE p_history_out IS NOT NULL
	</select>
	
	<!-- 납부 내역 : 출차하지 않은 구역 제외 -->
	<select id="getParkingPayList" resultMap="pHistoryMap">
		SELECT * 
		FROM (SELECT p_history_index, history_index, p_history_in, p_history_out, p_history_price, p_history_space, p_history_date, member_id, rownum as num
			  FROM (SELECT p_history_index, ph.history_index, p_history_in, p_history_out, p_history_price, p_history_space, p_history_date, ht.member_id
				    FROM park_history_tbl ph, history_tbl ht
				    WHERE ph.history_index = ht.history_index
				    	AND ph.p_history_out IS NOT NULL
			<choose>
				<when test="standard == 2">
					ORDER BY p_history_date DESC))
				</when>
				<when test="standard == 3">
					ORDER BY ht.member_id DESC))
				</when>
				<when test="standard == 4">
					ORDER BY p_history_in DESC))
				</when>
				<when test="standard == 5">
					ORDER BY p_history_out DESC))
				</when>
				<when test="standard == 6">
					ORDER BY p_history_price DESC))
				</when>
				<when test="standard == 8">
					ORDER BY p_history_date))
				</when>
				<when test="standard == 9">
					ORDER BY ht.member_id))
				</when>
				<when test="standard == 10">
					ORDER BY p_history_in))
				</when>
				<when test="standard == 11">
					ORDER BY p_history_out))
				</when>
				<when test="standard == 12">
					ORDER BY p_history_price))
				</when>
				<otherwise>
				    ORDER BY p_history_index DESC))
				</otherwise>
			</choose>
	<![CDATA[
		WHERE num >= #{start} AND NUM <= #{end}
		]]>
	</select>
	
	<!-- 해당 주차 구역 정보 -->
	<select id="getSpaceState" resultType="spring.mvc.baobob.vo.Parking">
		SELECT *
		FROM park_tbl
		WHERE park_index = #{park_index}
	</select>
	
	<!-- 해당 주차 구역의 마지막 사용자 
		1. 시간차를 구하기
		2. 각 단위로 나누어 더하기 (숫자로 변환)
		3. 절대값 변환 (음수 제거) + 최소값 구하기
		4. 100(1분) 이하의 차이만 있는 member_id
	-->
	<select id="getParkLastDateMember" resultType="String">
		<![CDATA[
		SELECT mem
        FROM(
	        SELECT mem, MIN(ABS(test)) as test
			FROM( SELECT mem, trunc(
			         extract(day from intvl) * 24 * 60 * 60 
			       + extract(hour from intvl) * 60 * 60 
			       + extract(minute from intvl) * 60
			       + extract(second from intvl)
			       ) as test
				  FROM (SELECT member_id mem, p_history_in - TO_TIMESTAMP(#{park_last_date}, 'YY/mm/dd hh24:mi:ss.FF9') intvl 
				  		FROM park_history_tbl pht, history_tbl ht
						WHERE pht.history_index = ht.history_index
			))
			GROUP BY mem
			ORDER BY test
        )
        WHERE test < 500
		]]>
	</select>
	
	<!-- 하루 평균 입차 시간 / 시간대별 입차수 -->	
	<select id="getDayInTimeAvg" resultType="java.util.Map">
		SELECT hour, avg(sh) avg
		FROM (
		    SELECT year, month, day, hour, count(hour) sh
		    FROM (
		        SELECT 
		            EXTRACT(YEAR FROM p_history_in) year,
		            EXTRACT(MONTH FROM p_history_in) month,
		            EXTRACT(DAY FROM p_history_in) day,
		            EXTRACT(HOUR FROM p_history_in) hour
		        FROM park_history_tbl
		   		)
		    GROUP BY year, month, day, hour
			)
		GROUP BY hour
	</select>
	
	<!-- 하루 평균 출차 시간 / 시간대별 출차수 -->	
	<select id="getDayOutTimeAvg" resultType="java.util.Map">
		SELECT hour, avg(sh) avg
		FROM (
		    SELECT year, month, day, hour, count(hour) sh
		    FROM (
		        SELECT 
		            EXTRACT(YEAR FROM p_history_out) year,
		            EXTRACT(MONTH FROM p_history_out) month,
		            EXTRACT(DAY FROM p_history_out) day,
		            EXTRACT(HOUR FROM p_history_out) hour
		        FROM park_history_tbl
		    	)
		    GROUP BY year, month, day, hour
			)
		GROUP BY hour
	</select>
	
	<!-- 구역 변화 -->
	<select id="getParkChageState" resultType="spring.mvc.baobob.vo.Parking">
		SELECT *
		FROM (
			SELECT park_index, park_state, park_theme, park_last_date, rownum num
			FROM (SELECT park_index, park_state, park_theme, park_last_date
		      	  FROM park_tbl
		   <if test="order == 0">
		      	  ORDER BY park_last_date DESC))
		   </if>
		   <if test="order == 1">
		      	  WHERE park_last_out IS NOT NULL
		      	  ORDER BY park_last_out DESC))
		   </if>
		<![CDATA[
		WHERE num >= 1 AND num <= 13
		]]>
	</select>
	
	<!-- 올해 요일별 입차수 -->
	<select id="getWeekIn" resultType="java.util.Map">
		SELECT COUNT(ins) count, day
		FROM (
		    SELECT p_history_in ins, TO_CHAR(p_history_in, 'D') day
		    FROM park_history_tbl
		    WHERE p_history_in IS NOT NULL
                AND TO_CHAR(p_history_in, 'YY') = TO_CHAR(SYSDATE, 'YY')
		)
		GROUP BY day
	</select>
	
	<!-- 올해 요일별 출차수 -->
	<select id="getWeekOut" resultType="java.util.Map">
		SELECT COUNT(out) count, day
		FROM (
		    SELECT p_history_out out, TO_CHAR(p_history_out, 'D') day
		    FROM park_history_tbl
		    WHERE p_history_out IS NOT NULL
                AND TO_CHAR(p_history_out, 'YY') = TO_CHAR(SYSDATE, 'YY')
		)
		GROUP BY day
	</select>
	
	<!-- 올해 월별  입차수 -->
	<select id="getMonthIn" resultType="java.util.Map">
		SELECT COUNT(ins) count, mon
		FROM (
		    SELECT p_history_in ins, TO_CHAR(p_history_in, 'MM') mon
		    FROM park_history_tbl
		    WHERE p_history_in IS NOT NULL
                AND TO_CHAR(p_history_in, 'YY') = TO_CHAR(SYSDATE, 'YY')
		)
		GROUP BY mon
	</select>
	
	<!-- 올해 월별 출차수 -->
	<select id="getMonthOut" resultType="java.util.Map">
		SELECT COUNT(out) count, mon
		FROM (
		    SELECT p_history_out out, TO_CHAR(p_history_out, 'MM') mon
		    FROM park_history_tbl
		    WHERE p_history_out IS NOT NULL
                AND TO_CHAR(p_history_out, 'YY') = TO_CHAR(SYSDATE, 'YY')
		)
		GROUP BY mon
	</select>
	
	<!-- 성비율 -->
	<select id="getParkingSexRatio" resultType="java.util.Map">
		SELECT member_sex sex, COUNT(member_sex) count
		FROM park_history_tbl ph, history_tbl ht, member_tbl mt
		WHERE ph.history_index = ht.history_index
		    AND ht.member_id = mt.member_id
		GROUP BY member_sex	
	</select>
	
	<!-- 올해 납부 내역 -->
	<select id="getThisYearPayList" resultType="spring.mvc.baobob.vo.ParkingHistory">
		SELECT *
		FROM park_history_tbl
		WHERE p_history_out IS NOT NULL
		    AND TO_CHAR(p_history_out, 'Y') = TO_CHAR(SYSDATE, 'Y')
	</select>
	
	<!-- 총 수익 -->
	<select id="getTotalPrice" resultType="String">
		SELECT SUM(p_history_price) 
		FROM park_history_tbl
		WHERE p_history_out IS NOT NULL
		<if test="year != null and year == 1">
		    AND TO_CHAR(p_history_in, 'YY') = TO_CHAR(SYSDATE, 'YY')
		</if>
		<if test="year != null and year == -1">
			AND TO_CHAR(p_history_in, 'YY') = TO_CHAR(SYSDATE, 'YY')-1
		</if>
	</select>
	
	<!-- 아두이노. 주차 구역 상태 수정 -->
	<update id="arduinoInput" parameterType="java.util.Map">
		UPDATE park_tbl
		SET
			park_state = #{pin}
		<if test="pin == 0">
			, park_last_date = SYSTIMESTAMP
		</if>
		<if test="pin == 1">
			, park_last_out = SYSTIMESTAMP
		</if>
		WHERE park_index = #{index}
			AND park_state != #{pin}
	</update>
</mapper>