<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="spring.mvc.baobob.member_mypage.persistence.Member_mypageDAO">

<!-- *************************************************************************************** -->	
<!-- ************************************* 정보수정 START ************************************* -->	

	<!-- 중복확인 체크 -->
	<select id="idCheck" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM member_tbl WHERE member_id=#{strId}	
	</select>

	<!-- 로그인 -->
	<select id="memPCheck" resultType="int">
		SELECT COUNT(*) FROM member_tbl WHERE member_id=#{strId} AND member_pwd=#{strPwd}
	</select>

	<!-- 회원정보 가져오기 -->
	<select id="getMemberInfo" parameterType="String" resultType="spring.mvc.baobob.vo.Member">
		SELECT * FROM member_tbl WHERE member_id=#{strId}
	</select>

	<!-- 회원정보 수정 처리 -->
	<update id="updateMember" parameterType="spring.mvc.baobob.vo.Member">
		UPDATE member_tbl 
		SET member_pwd=#{member_pwd},
			member_name=#{member_name},
			member_address=#{member_address},
			member_tel=#{member_tel},
			member_email=#{member_email}, 
			member_img=#{member_img}
		WHERE member_id=#{member_id}
	</update>
	
	<!-- 회원 탈퇴 -->
	<delete id="memPDelPro" parameterType="String">
		DELETE FROM member_tbl WHERE member_id = #{strId}
	</delete>

<!-- ************************************** 정보수정 END ************************************** -->	
<!-- *************************************************************************************** -->

<!-- ************************************************************************************** -->	
<!-- ************************************* 1:1문의글 START ************************************* -->	

	<!-- 1:1문의 글갯수 구하기 -->
	<select id="getArticleCnt" resultType="int">
		SELECT COUNT(*) FROM board_tbl WHERE board_type = 02
	</select>
	
	<!-- 1:1문의글 목록 조회 -->
	<select id="getArticleList" resultType="spring.mvc.baobob.vo.BoardVO">
		<![CDATA[
		SELECT * 
		FROM ( SELECT board_index,member_id, board_pwd, board_type, board_subject, 
						board_content, board_img, board_readCnt, board_ref, board_ref_step, 
                		board_ref_level, board_reg_date, board_ip, rownum rNum
      		   FROM ( SELECT * FROM board_tbl WHERE board_type = 02
              		ORDER BY board_ref DESC, board_ref_step ASC )
            ) 
		WHERE rNum >= #{start} AND rNum <= #{end}
		]]>
	</select>
	
	<!-- 1:1문의,분실물 문의 상세페이지 가져오기 -->
	<select id="getArticle" resultType="spring.mvc.baobob.vo.BoardVO">
		SELECT * FROM board_tbl WHERE board_index = #{num}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="addReadCnt" parameterType="int">
		UPDATE board_tbl SET board_readCnt = board_readCnt + 1 WHERE board_index = #{num}
	</update>
	
	<!-- 비밀번호 확인 -->
	<select id="pwdCheck" parameterType="java.util.Map" resultType="int">
		SELECT COUNT(*) FROM board_tbl WHERE board_index = #{num} AND board_pwd = #{strPwd}
	</select>
	
	<!-- 1:1문의 글 수정처리 -->
	<update id="updateQuestion" parameterType="spring.mvc.baobob.vo.BoardVO">
		UPDATE board_tbl SET board_subject=#{board_subject}, board_content=#{board_content}, board_pwd=#{board_pwd} WHERE board_index=#{board_index}
	</update>
	
	<!-- 1:1문의 작성 Start -->
	
		<!-- 제목글인 경우 -->
		<select id="getMaxNum" resultType="int">
			SELECT MAX(board_index)+1 FROM board_tbl
		</select>
	
		<!-- 답변글인 경우 -->
		<update id="updateReply" parameterType="spring.mvc.baobob.vo.BoardVO">
			<![CDATA[	
				UPDATE board_tbl
				SET board_ref_step = board_ref_step + 1 
				WHERE board_ref=#{board_ref} AND board_ref_step > #{board_ref_step}
			]]>
		</update>
	
		<!-- 1:1문의글 작성 -->
		<insert id="insertQuestion" parameterType="spring.mvc.baobob.vo.BoardVO">
			INSERT INTO board_tbl (board_index,member_id, board_pwd, board_type, board_subject, board_content, board_img, board_readCnt, board_ref, board_ref_step, board_ref_level, board_reg_date, board_ip) 
			VALUES(board_tbl_SEQ.NEXTVAL,#{member_id},#{board_pwd},02,#{board_subject},#{board_content},'board_img 01',0,#{board_ref},#{board_ref_step},#{board_ref_level},#{board_reg_date},#{board_ip})
		</insert>
	
	<!-- 1:1문의 작성 End -->
	
	<!-- 글삭제 Start -->
	
		<!-- 답글이 존재하는지 여부 -->
		<select id="checkReply" parameterType="spring.mvc.baobob.vo.BoardVO" resultType="int">
			<![CDATA[
				SELECT COUNT(*) FROM board_tbl WHERE board_ref=#{board_ref} AND board_ref_step=#{board_ref_step} + 1 AND board_ref_level > #{board_ref_level}
			]]>
		</select>
		
		<!-- 답글이 없는 경우 -->
		<update id="updateRef_step" parameterType="spring.mvc.baobob.vo.BoardVO">
			<![CDATA[
				UPDATE board_tbl SET board_ref_step=board_ref_step - 1 WHERE board_ref=#{board_ref} AND board_ref_step > #{board_ref_step}
			]]>
		</update>
		
		<!-- 글삭제 처리 -->
		<delete id="deleteQuestion" parameterType="int">
			DELETE FROM board_tbl WHERE board_index = #{num}
		</delete>
		
	<!-- 글삭제 End -->
	
<!-- ************************************** 1:1문의글 END ************************************** -->	
<!-- ************************************************************************************** -->	

<!-- ************************************************************************************** -->	
<!-- ************************************ 분실물문의 START *********************************** -->	
	
	<!-- 분실물 문의 글갯수 구하기 -->
	<select id="getArticleLCnt" resultType="int">
		SELECT COUNT(*) FROM board_tbl WHERE board_type = 03
	</select>

	<!-- 분실물 문의글 목록 조회 -->
	<select id="getArticleLList" resultType="spring.mvc.baobob.vo.BoardVO">
		<![CDATA[
		SELECT * 
		FROM ( SELECT board_index,member_id, board_pwd, board_type, board_subject, 
						board_content, board_img, board_readCnt, board_ref, board_ref_step, 
                		board_ref_level, board_reg_date, board_ip, rownum rNum
      		   FROM ( SELECT * FROM board_tbl WHERE board_type = 03
              		ORDER BY board_ref DESC, board_ref_step ASC )
            ) 
		WHERE rNum >= #{start} AND rNum <= #{end}
		]]>
	</select>

	<!-- 분실물 문의글 작성 -->
	<insert id="insertLost" parameterType="spring.mvc.baobob.vo.BoardVO">
		INSERT INTO board_tbl (board_index,member_id, board_pwd, board_type, board_subject, board_content, board_img, board_readCnt, board_ref, board_ref_step, board_ref_level, board_reg_date, board_ip) 
		VALUES(board_tbl_SEQ.NEXTVAL,#{member_id},#{board_pwd},03,#{board_subject},#{board_content},#{board_img},0,#{board_ref},#{board_ref_step},#{board_ref_level},#{board_reg_date},#{board_ip})
	</insert>

<!-- ************************************* 분실물문의 END ************************************ -->	
<!-- ************************************************************************************** -->	

<!-- ************************************************************************************** -->	
<!-- ************************************* 무비로그 START ************************************ -->	

	<!-- wishList 갯수 -->
	<select id="wishListCnt" resultType="int">
		SELECT COUNT(*) FROM member_wishList_tbl WHERE member_id = #{strId}
	</select>
	
	<!-- wishList 리스트 -->
	<select id="getWishListMovies" resultType="spring.mvc.baobob.vo.MovieVO">
		<![CDATA[
			SELECT * 
			FROM (SELECT w.member_id, w.movie_index,
			             m.movie_title, m.movie_content, m.movie_janre, m.movie_age, 
			             m.movie_rel_date, m.movie_director, m.movie_star, m.movie_country, m.movie_runTime, 
			             m.movie_poster, m.movie_trailer, m.movie_state, rownum rNum 
			       FROM (SELECT * 
			             FROM member_wishList_tbl 
			             ORDER BY movie_index DESC) w
			       JOIN movie_tbl m
			       ON m.movie_index = w.movie_index
			       WHERE member_id = #{strId}
			     ) 
			WHERE  rNum >= #{start} AND rNum <= #{end}
		 ]]>
	</select>
	
	<!-- 내가본 영화 갯수 -->
	<select id="movieClearCnt" resultType="int">
		SELECT COUNT(*) 
		FROM history_tbl h JOIN movie_history_tbl m
		ON h.history_index = m.history_index
		WHERE member_id = #{strId}
	</select>
	
	<!-- 내가 본 영화 리스트 -->
	<select id="getMovieClear" resultType="spring.mvc.baobob.vo.MovieHistoryVO">
		<![CDATA[
			SELECT *
			FROM( SELECT mh.history_index, h.member_id, m.movie_index, h.history_date, s.theater_index,
			         s.schedule_starttime, s.schedule_endtime, s.theater_schedule_index,
			         m.movie_title, m.movie_content, m.movie_janre, m.movie_age, 
			         m.movie_rel_date, m.movie_director, m.movie_star, m.movie_country, m.movie_runTime, 
			         m.movie_poster, m.movie_trailer, m.movie_state, rownum rNum 
			        FROM history_tbl h 
			        JOIN movie_history_tbl mh
			        ON h.history_index = mh.history_index
			        JOIN theater_schedule_tbl s
			        ON s.theater_schedule_index = mh.theater_schedule_index
			        JOIN movie_tbl m
			        ON m.movie_index = s.movie_index
			        WHERE h.member_id = #{strId}
			    )
			WHERE  rNum >= #{start} AND rNum <= #{end}
		 ]]>
	</select>
	
	<!-- 예약한 상영관,좌석 불러오기 -->
	<select id="getMovieSeat" resultType="spring.mvc.baobob.vo.Theater_seatVO">
		SELECT * FROM theater_seat_tbl WHERE member_id=#{strId}
	</select>
	
	<!-- 무비 다이어리 글갯수 구하기 -->
	<select id="getMovieDiaryCnt" resultType="int">
		SELECT COUNT(*) 
		FROM board_tbl 
		WHERE board_type = 05
		AND member_id=#{strId}
	</select>
	
	<!-- 무비다이어리 목록 조회 -->
	<select id="getMovieDiaryList" resultType="spring.mvc.baobob.vo.BoardVO">
		<![CDATA[
		SELECT * 
		FROM ( SELECT board_index,member_id, board_pwd, board_type, board_subject, 
						board_content, board_img, board_readCnt, board_ref, board_ref_step, 
                		board_ref_level, board_reg_date, board_ip, rownum rNum
      		   FROM ( SELECT * FROM board_tbl WHERE board_type = 05 AND member_id=#{strId}
              		ORDER BY board_ref DESC, board_ref_step ASC )
            ) 
		WHERE rNum >= #{start} AND rNum <= #{end}
		]]>
	</select>
	
	<!-- 무비다이어리 작성 -->
	<insert id="insertMovieDiary" parameterType="spring.mvc.baobob.vo.BoardVO">
		INSERT INTO board_tbl (board_index,member_id, board_pwd, board_type, board_subject, board_content, board_img, board_readCnt, board_ref, board_ref_step, board_ref_level, board_reg_date, board_ip) 
		VALUES(board_tbl_SEQ.NEXTVAL,#{member_id},#{member_id},05,#{board_subject},#{board_content},'board_img 01',0,board_tbl_SEQ.currval,0,0,#{board_reg_date},#{board_ip})
	</insert>
	
	<!-- 무비다이어리 삭제 처리 -->
	<delete id="deleteMovieDiary" parameterType="int">
		DELETE FROM board_tbl WHERE board_index = #{num}
	</delete>
	
	<!-- 위시리스트 추가 -->
	<insert id="addWishList" parameterType="spring.mvc.baobob.vo.WishListVO">
		INSERT INTO member_wishList_tbl (member_id, movie_index) 
		VALUES (#{member_id}, #{movie_index})
	</insert>
	
	
	<!-- 위시리스트 삭제 처리 -->
	<delete id="delMovieWishList" parameterType="int">
		DELETE FROM member_wishList_tbl WHERE movie_index = #{num}
	</delete>
	
	
<!-- ************************************** 무비로그 END ************************************* -->	
<!-- ************************************************************************************** -->


<!-- ************************************************************************************** -->	
<!-- ************************************ 영화예매 취소 START *********************************** -->	
	
	<!-- 예매좌석 정보 가져오기 -->
	<select id="getSeatInfo" resultType="spring.mvc.baobob.vo.Theater_seatVO">
		SELECT *
		FROM theater_seat_tbl
		WHERE member_id = #{memId}
		AND theater_schedule_index = #{schedule_index}
	</select>
	
	<!-- 예매좌석 취소 - 예매좌석 state 돌려놓기 -->
	<update id="updateSeatState" parameterType="int">
		UPDATE theater_seat_tbl 
		SET seat_state = (SELECT seat_state 
		                   FROM theater_seat_tbl
		                   WHERE theater_index = (SELECT theater_index
		                                           FROM theater_seat_tbl
		                                           WHERE seat_index = #{seat_index})
		                   AND theater_schedule_index = -1
		                   AND seat_row = (SELECT seat_row
		                                    FROM theater_seat_tbl
		                                    WHERE seat_index = #{seat_index})
		                   AND seat_col = (SELECT seat_col
		                                    FROM theater_seat_tbl
		                                    WHERE seat_index = #{seat_index})
		                  ), member_id = null
		WHERE seat_index = #{seat_index}
	</update>
	
	<!-- 예매좌석 취소 - 스케쥴에 빈좌석 돌려놓기 -->
	<update id="updateEmptySeat" parameterType="int">
		UPDATE theater_schedule_tbl
		SET schedule_empty_seat = schedule_empty_seat + 1
		WHERE theater_schedule_index = (SELECT theater_schedule_index
		                                FROM theater_seat_tbl
		                                WHERE seat_index = #{seat_index})
	</update>
	
	<!-- 예매좌석 취소 - movie_count 돌려놀기 -->
	<update id="updateMovieCount" parameterType="Map">
		UPDATE movie_tbl
		SET movie_count = movie_count - #{movieCount}
		WHERE movie_index = (SELECT movie_index
		                     FROM theater_schedule_tbl
		                     WHERE theater_schedule_index = #{schedule_index})
	</update>
	
	<!-- 예매내역 삭제(movie_history_tbl) -->
	<delete id="moviePaidDelPro" parameterType="int">
		DELETE FROM movie_history_tbl WHERE history_index = #{num}
	</delete>
	
	<!-- 예매내역 삭제(history_tbl) -->
	<delete id="historyDelPro" parameterType="int">
		DELETE FROM history_tbl WHERE history_index = #{num}
	</delete>
	
	
<!-- ************************************** 영화예매 취소 END ************************************* -->	
<!-- ************************************************************************************** -->


<!-- ************************************************************************************** -->	
<!-- ************************************* 식당로그 START ************************************ -->	
	
	<!-- 식당 예약 갯수 구하기 -->
	<select id="restaurantLogCnt" resultType="int">
		SELECT COUNT(*)
		FROM restaurant_tbl r
		JOIN restaurant_schedule_tbl rs
		ON r.restaurant_index = rs.restaurant_index
		JOIN restaurant_history_tbl rh
		ON rs.restaurant_schedule_index = rh.restaurant_schedule_index
		JOIN history_tbl h
		ON rh.history_index = h.history_index
		JOIN member_tbl m
		ON h.member_id = m.member_id
		WHERE h.member_id=#{strId}
	</select>
	
	<!-- 식당 예약 목록 조회 -->
	<select id="restaurantLogList" resultType="spring.mvc.baobob.vo.RestaurantLogVO">
		<![CDATA[
		SELECT *
		FROM (SELECT h.member_id, rs.restaurant_schedule_index, rs.schedule_starttime, rs.schedule_endtime,
		             rt.table_col, rt.table_row, rt.table_state, rt.restaurant_table_index, r.restaurant_index,
		             r.restaurant_name,r.restaurant_tel, rh.restaurant_history_state,h.history_date, rownum rNum
		        FROM restaurant_tbl r
		        JOIN restaurant_schedule_tbl rs
		        ON r.restaurant_index = rs.restaurant_index
		        JOIN restaurant_table_tbl rt
		        ON rs.restaurant_schedule_index = rt.restaurant_schedule_index
		        JOIN restaurant_history_tbl rh
		        ON rs.restaurant_schedule_index = rh.restaurant_schedule_index
		        JOIN history_tbl h
		        ON rh.history_index = h.history_index
		        WHERE h.member_id = #{strId}
		        AND rt.table_state = 3
		    )
		WHERE rNum >= #{start} AND rNum <= #{end}
		]]>
	</select>
	
	<!-- 매장을 구성하는 타일의 행열 (예:5*5) -->
	<select id="getColRow" resultType="spring.mvc.baobob.vo.TableVO">
		SELECT MAX(table_row) table_row, MAX(table_col) table_col 
		FROM restaurant_table_tbl 
		WHERE restaurant_index = #{restaurant_index} 
		AND restaurant_schedule_index IS null
	</select>
	
	<!-- state 정보 조회 -->
	<select id="getState" resultType="int">
		SELECT table_state 
		FROM restaurant_table_tbl 
		WHERE restaurant_index = #{restaurant_index} AND restaurant_table_index = #{restaurant_table_index}
		<if test="restaurant_schedule_index == null">
			AND restaurant_schedule_index IS null
		</if>
		<if test="restaurant_schedule_index != null">
			AND restaurant_schedule_index = #{restaurant_schedule_index}
		</if>
	</select>
	
	<!-- 히스토리 인덱스 조회 -->
	<select id="getHistoryIndex" resultType="int">
		SELECT history_index
		  FROM restaurant_history_tbl
		 WHERE restaurant_schedule_index = #{restaurant_schedule_index}
		   AND restaurant_table_index = #{restaurant_table_index}
		   AND discount = 0
		   AND member_use_point = 0
		   AND payvalue = 0
		   AND restaurant_history_state = 0
	</select>
	
	<!-- 레스토랑 히스토리 테이블에 이용 내역 삭제 -->
	<delete id="delRestaurantHistory" parameterType="Map">
		DELETE FROM restaurant_history_tbl
		WHERE history_index = #{history_index}
		AND restaurant_schedule_index = #{restaurant_schedule_index}
		AND restaurant_table_index = #{restaurant_table_index}
		AND discount = 0
		AND member_use_point = 0
		AND payvalue = 0
		AND restaurant_history_state = 0
	</delete>
	
	<!-- 히스토리 테이블에 이용 내역 삭제 -->
	<delete id="delHistory" parameterType="Map">
		DELETE FROM history_tbl
		WHERE history_index = #{history_index}
		AND member_id = #{member_id}
	</delete>
	
	<!-- '사용 중'인 테이블을 '사용 가능'으로 변경 -->
	<update id="modState" parameterType="Map">
		UPDATE restaurant_table_tbl
		SET table_state = 1
		WHERE restaurant_index = #{restaurant_index}
		AND restaurant_schedule_index = #{restaurant_schedule_index}
		AND restaurant_table_index = #{restaurant_table_index}
	</update>
	
	<!-- 테이블 전체 삭제 -->
	<delete id="delTable" parameterType="Map">
		DELETE FROM restaurant_table_tbl
		WHERE restaurant_index = #{restaurant_index}
		AND restaurant_schedule_index = #{restaurant_schedule_index}
	</delete>
	
	<!-- 스케줄 삭제 처리 -->
	<delete id="delSchedule" parameterType="Map">
		DELETE FROM restaurant_schedule_tbl
		WHERE restaurant_schedule_index = #{restaurant_schedule_index}
	</delete>
	
	
	
	
	
<!-- ************************************** 식당로그 END ************************************* -->	
<!-- ************************************************************************************** -->
	
	<!-- 주차장 이용내역 갯수 -->
	<select id="parkHistoryCnt" resultType="int">
		SELECT COUNT(*)
		FROM park_history_tbl p JOIN history_tbl h
		ON h.history_index = p.history_index
		WHERE h.member_id=#{strId}
	</select>
	
	<!-- 주차장 이용내역 목록 조회 -->
	<select id="parkHistoryList" resultType="spring.mvc.baobob.vo.ParkingHistory">
		<![CDATA[
			SELECT *
			FROM ( SELECT p.p_history_index, p.p_history_in, p.p_history_out, p.p_history_price,
			              p.p_history_space, p.p_history_date,
			              h.history_index, h.history_date, h.member_id, rownum rNum 
			        FROM park_history_tbl p JOIN history_tbl h
			        ON h.history_index = p.history_index
			        WHERE member_id=#{strId}
			     )
			WHERE rNum >= #{start} AND rNum <= #{end}
		 ]]>
	</select>
	
	<!-- 개인별 히스토리 목록 수 조회 -->
	<select id="getHistoryListCnt" resultType="int">
		SELECT COUNT(*) 
		FROM history_tbl
		WHERE member_id = #{strId}
	</select>
	
	<!-- 개인별 히스토리 목록 조회 -->
	<select id="getHistoryList" resultType="spring.mvc.baobob.vo.HistoryVO">
		<![CDATA[
			SELECT * 
			FROM ( SELECT history_index, history_date, member_id, rownum rNum
			       FROM history_tbl
			       WHERE member_id=#{strId}
			       ORDER BY history_date DESC
			    ) 
			WHERE rNum >= #{start} AND rNum <= #{end}
		 ]]>
	</select>
	
	
	
	
	
	

</mapper>